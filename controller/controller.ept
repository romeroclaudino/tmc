node radiator(up1, down1, up2, down2, c1, c2: bool) returns (power: int)
let
    automaton
     state Off do
        power = 0
     unless up1 or not c1 then FrostProtection

     state FrostProtection do
        power = 300
     unless down1 or not c1 then Off |
            up1 & c1 then Eco |
            up2 & c2 then High

     state Eco do
        power = 1500
     unless down1 or not c1 then FrostProtection |
            up2 & c2 then High

     state High do
        power = 2000
     unless down2 or not c2 then FrostProtection |
            down1 or not c1 then Eco
    end 
tel

node room(presence: bool) returns (room_oc: bool)
let
    automaton
     state Empty do
        room_oc = false
     unless presence then Occupied

     state Occupied do
        room_oc = true
     unless not presence then Empty
    end 
tel

node lighter(userLamp, cont1, cont2: bool) returns (sLamp:bool)
let
    automaton
     state OFF do
        sLamp = false; 
     unless (userLamp & cont1) or not cont2 then ON
     state ON do
        sLamp = true;
     unless (userLamp & cont2) or not cont1 then OFF
    end 
tel


node mainNode(up1, down1, up2, down2, presence, userLamp, userTV: bool) returns (radPower: int; room_oc, lamp_on, tv_on: bool)
    contract
        var rule1, rule4: bool;
        let
        rule1 = not room_oc or (lamp_on or tv_on);
        rule4 = room_oc or (not(lamp_on or tv_on) & (radPower = 0 or radPower = 300))
        tel
     enforce  rule1 & rule4
     with(c1, c2, contLamp1, contLamp2, contTV1, contTV2: bool)
let
    radPower = inlined radiator(up1, down1, up2, down2, c1, c2);
    room_oc = inlined room(presence);
    lamp_on = inlined lighter(userLamp, contLamp1, contLamp2);
    tv_on = inlined lighter(userTV, contTV1, contTV2)

tel