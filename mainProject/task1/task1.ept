node robot(guestH, foodO, deliveringF, c, endS: bool) returns (currentState: int)
let
    automaton
     state Idle do
     currentState = 0;
     unless guestH & (not foodO & not deliveringF) then GuestHosting |
          	foodO & (not guestH & not deliveringF) then FoodOrdering |
            deliveringF & (not guestH & not foodO) then DeliveringFood

     state GuestHosting do
     currentState = 1;
     unless endS & c then Idle

     state FoodOrdering do
     currentState = 2;
     unless endS & c then DeliveringFood

     state DeliveringFood do
     currentState = 3;
     unless endS & c then Idle | c then FoodOrdering | c then GuestHosting
    end
tel

(* 1 - GuestHosting
2 - FoodOrdering
3 - DeliveringFood *)

node mainNode(robot1endS,robot2endS, robot3endS, arrival: bool) returns (currentStRobot1, currentStRobot2, currentStRobot3: int)    
contract
        var rule1: bool; 
        (* var rule1, rule2: bool;  *)
        let
        	rule1 = (currentStRobot1 = 1 or currentStRobot2 = 1 or currentStRobot3 = 1) &
                    (currentStRobot1 = 2 or currentStRobot2 = 2 or currentStRobot3 = 2) &
                    (currentStRobot1 = 3 or currentStRobot2 = 3 or currentStRobot3 = 3);

            (* rule2 = currentStRobot1 + currentStRobot2 + currentStRobot3 > 5 & 
                    currentStRobot1 = 0 or currentStRobot2 = 0 or currentStRobot3 = 0; *)

(*             rule2 = (currentStRobot1 = 3 & currentStRobot2 = 3)
                 or (currentStRobot1 = 3 & currentStRobot3 = 3) 
                 or (currentStRobot2 = 3 & currentStRobot3 = 3); *)
                    
                (* rule1 = (currentStRobot1 + currentStRobot2 + currentStRobot3) = 6; (* & *)
                           currentStRobot1 > 0 & currentStRobot2 > 0 & currentStRobot3 > 0; *)
            (* arrivalScenario = currentStRobot1 = 1 & currentStRobot2 = 2 & currentStRobot3 = 3; *)

        tel
     enforce not arrival or rule1
     (* enforce not arrival or arrivalScenario *)
     with(robot1GuestH, robot1FoodO, robot1DeliveringF, c1,
          robot2GuestH, robot2FoodO, robot2DeliveringF, c2,
          robot3GuestH, robot3FoodO, robot3DeliveringF, c3: bool)
let
    currentStRobot1 = inlined robot(robot1GuestH, robot1FoodO, robot1DeliveringF, c1, robot1endS);
    currentStRobot2 = inlined robot(robot2GuestH, robot2FoodO, robot2DeliveringF, c2, robot2endS);
    currentStRobot3 = inlined robot(robot3GuestH, robot3FoodO, robot3DeliveringF, c3, robot3endS)
tel